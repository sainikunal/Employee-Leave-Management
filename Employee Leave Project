#include <iostream>
#include <windows.h>
#include <fstream>
#include <conio.h>
#include <iomanip>
using namespace std;
class employee
{
    string name;
    long int id,leave,id1,per_day_income;;
    long int salary;
public:
    char menu();      //displays all menu functions

    void build();   //creates the new file and if file already exists then append the file
    void list();    //read the whole file and displays on the screen
    void insert();  //only add a single entry to the file
    void deletes(); //to delete data of a single employee
    void search();  //search for a single employee data and displays it
    long int auto_reg(); //generate the registration number automatically
    void edit();    //this function contains two sub functions which are in the next line
    void update_salary();  //part of edit() function. It updates only salary
    void update_leave();   //part of edit() function. It updates only leave
    void visitweb();
};

char title[][49] = {
                            "\n\t >  Create The Employee Table    ",
                            "\n\t    List The Employee Table      ",
                            "\n\t    Add A New Record             ",
                            "\n\t    Delete An Entry              ",
                            "\n\t    Update Menu                  ",
                            "\n\t    Search A record              ",
                            "\n\t    Visit this project on the web",
                            "\n\t    Quit The Program             "};
int main()
{
    employee emp;
    while(1)
    {
        system("cls");

            for (int i = 0; i <10 ; i++)
            {   cout  <<  title[i] << endl; }
            for(int y=0; y<9; y++)
            {
                for(int x=0; x<7; x++)
                {
                    switch(title[y][x])
                    {
                    case '>':
                        if(GetAsyncKeyState(VK_UP) != 0)
                        {
                            int y2  =(y-1);
                            switch(title[y2][x])
                            {
                            case ' ':
                                {
                                    title[y][x] = ' ';
                                    y -= 1;
                                    title[y2][x] = '>';
                                }
                                break;
                            }
                        }
                        if(GetAsyncKeyState(VK_DOWN) != 0)
                        {
                            int y2 = (y + 1);
                            switch(title[y2][x])
                            {
                            case ' ':
                                {
                                    title[y][x] = ' ';
                                    y += 1;
                                    title[y2][x] = '>';
                                }break;
                            }
                        }
                        if(GetAsyncKeyState(VK_RIGHT) != 0)
                        {
                            int x2 = (x + 3);
                            switch(title[y][x2])
                            {
                            case 'C':
                                {
                                    emp.build();
                                }break;
                             case 'L':
                                {
                                    emp.list();
                                }break;
                             case 'A':
                                {
                                    emp.insert();
                                }break;
                             case 'D':
                                {
                                    emp.deletes();
                                }break;
                             case 'U':
                                {
                                    emp.edit();
                                }break;
                             case 'S':
                                {
                                    emp.search();
                                }break;
                             case 'V':
                                {
                                    emp.visitweb();
                                }break;
                             case 'Q':
                                {
                                     exit(0);//EXIT_SUCCESS;
                                }break;
                            }


                        }
                    }
                }
            } Sleep(100);
    }
}


void employee::build()
{
    int num;
    system("cls");
    cout << "\t\nEnter Maximum number of entries : ";
    cin >> num;   //num stores the maximum number of entries to take the input as many times using loop
    system("cls");
    while(num < 0 || cin.fail()) //check for negative and integer value (user cannot enter character value)
            {
                cout << "\nPlease enter valid input : ";
                cin.clear();
                cin.ignore(256,'\n');
                cin  >>  num;
            }
    ofstream file("Employee Leave Management.txt",ios::app);  //opens file in append and write mode
    for(int i=1; i <= num; i++)     //runs the loop according to maximum no. of entries (num) to take the input
    {
        id=auto_reg();   //automatically generatd Reg. no. is stored in id variable
        cout << "\n\nRegistration no. of employee " << i << " : " << id;
        cout << "\n\nName of employee  :  ";    cin >> name;
        cout << "\nSalary of employee : ";  cin >> salary;
        while(id == salary)  //to check salary is not equal to registration number
                  {
                        cout << "\nSalary and Id could not be same.";
                        cout << "\nEnter different Amount : ";
                        cin >> salary;
                  }
        while(salary < 5000 || cin.fail()) //check for negative and integer value (user cannot enter character value)
            {
                cout << "\n\nSalary should be greater than 5000";
                cout << "\n\nPlease enter valid amount : ";
                cin.clear();
                cin.ignore(256,'\n');
                cin  >>  salary;
            }
        cout << "\nDays of Leave       : ";   cin >> leave;
         while((leave < 0 || leave >= 31) || cin.fail() ) //check for negative and integer value (value should not be character)
                  {
                      cout << "\nPlease enter valid input : ";
                      cin.clear();
                      cin.ignore(250 , '\n');
                      cin >> leave;
                  }
        per_day_income=salary/30;  //calculates per day income
        salary=salary-(leave*per_day_income);  //salary after deduction of leave
        file << name << endl << id << endl << salary << endl << leave << endl << endl;
        system("cls");
    }
    cout << "\nFile named \'Employee Leave Management'\ been created successfully";
    file.close();
    Sleep(1500);  main();
}


void employee::list()    //friend function to display all data stored in file
{
    system("cls");
    char c,ch;
    ifstream file("Employee Leave Management.txt");
    if(file.is_open())
        {
            employee e;
            while(file >> e.name >> e.id >> e.salary >> e.leave)
            {

                cout << "\nName of employee  : " << e.name;
               cout << "\nRegistration no.  : " << e.id;
               cout << "\nSalary of emploee : " << e.salary;
               cout << "\nDays of leave     : " << e.leave << endl;
               }
        }
    if( ! file.is_open() )    //if file is not open then it prints the message inside if statement
    {
        cout << "\n\n\tDatabase File Not Found.";
        cout << "\n\n\tYou Have To Create Employee Database File.";
    }
    file.close();
    cout << endl << endl;
     system("pause");
     main();

}


void employee::insert()
    {
        system("cls");
                    printf("\n\t\tAdd A New Record");
              cout << endl;   char ch1;
              ofstream file("Employee Leave Management.txt",ios::app); //file is opened in write and append mode
              if(file.is_open()) //if file is open, following operation will be done
              {     cout << "\t\tEnter The Following Items" << endl;
                  int id2 = auto_reg();  //value returned by auto_reg() is stored in id2 (the value is registration number)
                  cout << "\nRegistration no. of employee : " << id2;
                  cout << "\n\nName          : ";
                  cin >> name;
                 /* while(isdigit(name))
                  {
                      cout << "\nUse only characters";
                      cin >> name;
                  }*/
                  cout << "\nSalary        : ";
                  cin >> salary;
                  while(id2 == salary)
                  {
                        cout << "\nSalary and Id could not be same.";
                        cout << "\nEnter different Amount : ";
                        cin >> salary;
                  }
                  while(salary < 5000 || cin.fail() )  //check for negative and integer value (value should not be character)
                  {
                      cout << "\nSalary should be greater than 5000";
                      cout << "\n\nPlease Enter a valid amount : ";
                      cin.clear();
                      cin.ignore(256,'\n');
                      cin >> salary;
                  }
                  cout << "\nDays of Leave : ";   cin >> leave;
                  while((leave < 0 || leave >= 31) || cin.fail() ) //check for negative and integer value (value should not be character)
                  {
                      cout << "\nPlease enter valid input : ";
                      cin.clear();
                      cin.ignore(250 , '\n');
                      cin >> leave;
                  }
                  per_day_income=salary/30;
                  salary=salary-(leave*per_day_income);
                  system("cls");   //to clear the screen
                    cout << "\n\t\tPlease verify the details  ";
                    cout << "\n\nName of employee                         : "  << name;
                    cout << "\n\nRegistration No.                         : "  << id2;
                    cout << "\n\nSalary of employee after deducting leave : "  << salary;
                    cout << "\n\nDays of Leave entered                    : "  << leave;
                    cout << "\n\n\nAre you sure you want to add this to file (y/n) ? ";
                    cin >> ch1;

                    if(ch1 == 'y'||ch1 == 'Y')  //if ch1=yes or y then data is written to the file
                    {
                        file << name << endl << id << endl << salary << endl << leave << endl << endl;
                    } else
                       {    cout << "\n\nData not added !";
                            Sleep(1000);
                            main();
                       }
               }
               file.close();
              if(file.good())  //if writing is successful it returns true value
              cout << "\n\n\tData added successfully... ";
              cout << "\n\n\tGoing to Main Menu...";
              Sleep(2000);  //pause system (command window) for 2 second
            main();
}


void employee::deletes()
{
       system("cls");
       int id1,num=0,sid;
       int check;  char ch,tname;
       cout << "\n\tDelete An Entry";
       cout << "\n\nEnter Reg. No. To Delete That Entry : ";
       cin >> id1;
       while(id1  <=  0 || cin.fail())  //check for negative and integer value (value should not be character)
                  {
                      cout << "\nPlease Enter a valid ID : ";
                      cin.clear();
                      cin.ignore(256,'\n');
                      cin >> id1;
                  }
       ifstream file("Employee Leave Management.txt");
        while(file >> name >> id >> salary >> leave)
        {
            if(id1 == id)
            {
                cout << "\n\nName of employee   : " << name;
                cout << "\n\nRegistration no.   : " << id;
                cout << "\n\nSalary of employee : " << salary;
                cout << "\n\nLast leave record  : " << leave;
                cout << "\n\nAre you sure you want to delete this data (y/n) ? : ";
                cin >> ch;
                break;
            }
        }
        if(ch == 'y'||ch == 'Y')
           {
               file.seekg(0,ios::beg);
                   ofstream tempfile("temp.txt",ios::app);
               while(file >> name >> id >> salary >> leave)
               {
                   if(id1 != id)
                   {
                       tempfile << name << endl << id << endl << salary << endl << leave << endl << endl;
                   }
                   if(id1  ==  id)
                    num=1;
               }
               file.close();
               tempfile.close();
               num = 1;
               remove("Employee Leave Management.txt");
           rename("temp.txt","Employee Leave Management.txt");
           }
            file.clear();
           file.seekg(0,ios::beg);
            file.close();

           if(ch  ==  'n' || ch  ==  'N')
             {
                 cout << "\n\aData not deleted.";
                 num = 2;
             }
           if(num == 1)
           {
              cout << "\n\nEmployee Data has been deleted successfully.";
              cout << "\n\nGoing to main menu...";
                Sleep(1500);
                main();

           }
            if(num  ==  0)
                cout << "\n\nYou Entered Incorrect Details !";
                cout <<  "\n\nDo you want to search again (y/n) ? ";
                cin >> ch;
                if(ch == 'y' || ch == 'Y')
                    deletes();
                else
                main();
}


void employee::edit()
{
    system("cls");
    employee e;  //object of class employee
    int option;  static int n = 0;
    char option_again;
    cout << "\n\t\t\t       Update Menu";
    cout << "\n\n\t\t Press 1 -----> Update salary of an employee";
    cout << "\n\t\t Press 2 -----> Update leave record of an employee";
    cout << "\n\n\t\t Enter your choice : ";
    cin >> option;
    while(option < 0 || cin.fail())  //check for negative and integer value (value should not be character)
                  {
                      cout << "\nPlease Enter a Valid option : ";
                      cin.clear();
                      cin.ignore(250,'\n');
                      cin >> option;
                  }
    system("cls");
    switch(option)
    {
        case 1 :  e.update_salary();    break;
        case 2 :  e.update_leave();     break;
        default :  n++ ;   //to count the number of invalid inputs
                    if(n  ==  3)
                      {
                          cout << "\n\n\t\t\aSorry, you have reached the limit !\n\n";
                          exit(0);
                      }
                  cout << "\n\n\t\tInvalid choice !";
                  cout << "\n\n\t\tPress --> 'e' to display the options again";
                  cout << "\n\n\t\tPress --> any key to go to Main Menu";
                  cout << "\n\n\t\tEnter you choice : ";
                  //cin >> option_again;
                  if(getch() == 'e')
                    edit();
                  else main();
    }
}    //edit() function ends here


void employee:: update_salary() //only update salary of existing user (single user)
{

       system("cls");
       int num=0, uid, usalary, ssalary, uleave;
       ifstream file("Employee Leave Management.txt");
       if(file.is_open())
       {
       int check;  char ch; string uname;
       cout << "\n\tUpdate Salary Wizard";
       cout << "\n\nEnter the Registratio No. of the employee : ";
       cin >> id1;
       while(id1  <=  0 || cin.fail())
                    {
                        cout << "\nPlease enter a valid amount : ";
                        cin.clear();
                        cin.ignore(256);
                        cin >> id1;
                    }
       system ("cls");

            ofstream tempfile("temp.txt");
           while(file >> name >> id >> salary >> leave) //read until nothing is to read
           {
               if(id1 != id)  //if id1 not matches with id, all data is copied to a temporary file
               {
                   tempfile << name << endl << id << endl << salary << endl << leave << endl << endl;
               }
               if(id1  ==  id)
                {
                    uname = name;
                    uid = id;
                    usalary = salary;
                    uleave = leave;
                    cout << "\n\t\tLast record found";
                    cout << "\n\nName of employee     : " << uname;
                    cout << "\n\nRegistration no.     : " << uid;
                    cout << "\n\nSalary of employee   : " << usalary;
                    cout << "\n\nLast leave record    : " << uleave;
                    cout << "\n\nEnter updated salary : ";     cin >> ssalary;  // updated salary
                    while(ssalary <= 0 || cin.fail())
                    {
                        cout << "\nPlease enter a valid amount : ";
                        cin.clear();
                        cin.ignore(256, '\n');
                        cin >> ssalary;
                    }
                    while (ssalary < 4999)
                        {
                        cout << "\nSalary should be greater than 5000 : ";
                        cin.clear();
                        cin.ignore(256, '\n');
                        cin >> ssalary;
                    }
                    per_day_income=ssalary/30;   //calculate per day income
                    ssalary = ssalary - (leave * per_day_income);
                    tempfile << uname << setw(15) << uid << setw(15) << ssalary << setw(15) << uleave << endl;
                    if(file.good())
                        num = 1; //to display the message "writing was successful"
                }           }
           file.clear();
           file.seekg(0,ios::beg);
           file.close();
           tempfile.close();
       }
           remove("Employee Leave Management.txt"); //system("del Employee Leave Management.txt);
           rename("temp.txt","Employee Leave Management.txt");   //system("ren temp.txt Employee Leave Management.txt);
           if(num == 0)
             cout << "\n\aNo employee found with this Registration No. ";
           if(num == 1)
            cout << "\n\n\aEmployee Data has been updated successfully on the basis of last leave record";
            cout << "\n\nPress any key to continue : ";
            getch();  main();
}  //update_salary() function ends here. This function is part of edit() fuunction


void employee:: update_leave() //only update the leave to the file
{
       system("cls");
       int num = 0, uid, usalary, ssalary, uleave;
       int check;  char ch; string uname;
       cout << "\n\tUpdate Leave Wizard";
       cout << "\n\nEnter the Registratio No. of the employee : ";
       cin >> id1;
       while(id1  <=  0 || cin.fail())
                    {
                        cout << "\nPlease enter a valid Reg. No. : ";
                        cin.clear();
                        cin.ignore(256);
                        cin >> id1;
                    }
        system ("cls");
       ifstream file("Employee Leave Management.txt");
            ofstream tempfile("temp.txt");
           while(file >> name >> id >> salary >> leave) //read until nothing is to read
           {
               if(id1 != id)  //if id1 not matches with id, all data is copied to a temporary file
               {
                   tempfile << name << endl << id << endl << salary << endl << leave << endl << endl;
               }
               if(id1  ==  id)
                {
                    uname = name;
                    uid = id;
                    usalary = salary;
                    uleave = leave;
                    cout << "\n\t\tLast record found";
                    cout << "\n\nName of employee     : " << uname;
                    cout << "\n\nRegistration no.     : " << uid;
                    cout << "\n\nSalary of employee   : " << usalary;
                    cout << "\n\nLast leave record    : " << uleave;
                    cout << "\n\nEnter updated leave  : ";     cin >> uleave;
                     while((leave < 0 || leave >= 31) || cin.fail() ) //check for negative and integer value (value should not be character)
                      {
                          cout << "\nPlease enter valid input : ";
                          cin.clear();
                          cin.ignore(250 , '\n');
                          cin >> leave;
                      }
                    per_day_income=usalary/30;   //calculate per day income
                    ssalary = usalary - (uleave * per_day_income);
                    tempfile << uname << setw(15) << uid << setw(15) << ssalary << setw(15) << uleave << endl;
                    if(file.good())
                        num = 1;
                }           }
           file.clear();
           file.seekg(0,ios::beg);
           file.close();
           tempfile.close();
           remove("Employee Leave Management.txt");
           rename("temp.txt","Employee Leave Management.txt");
           if(num == 0)
             cout << "\n\aNo employee found with this Registration No. ";
           if(num == 1)
            cout << "\n\n\aEmployee Data has been updated successfully on the basis of last leave record";
            /*cout << "\n\nPress any key to continue : ";
            getch();*/  cout << "\n\nPress any key for main menu ";
            getch();  main();
}


void employee::search()
{
    ifstream file("Employee Leave Management.txt",ios::in);
    int sid;    char ch,ch1;
    system("cls");
    cout << "\n\t\tSearch Employee data from file";
    cout << "\n\nEnter Registration No. : ";
    cin >> sid;
    while(sid < 0 || cin.fail())  //check for negative and integer value (value should not be character)
                  {
                      cout << "\nPlease Enter a Valid Registration Number : ";
                      cin.clear();
                      cin.ignore(256,'\n');
                      cin >> sid;
                  }
    while(file >> name >> id >> salary >> leave)
    {
        if(id == sid)
        {
            cout << "\n\nName of employee   : " << name;
            cout << "\n\nRegistration no.   : " << id;
            cout << "\n\nSalary of employee : " << salary;
            cout << "\n\nLast leave record  : " << leave;
            break; file.close();
        }
    }
        if(id != sid)
            cout << "\n\n\aNo record found with this ID !";
            cout << "\n\nDo you want to search again (y/n) ? ";  cin >> ch1;
            if(ch1 == 'y'|| ch1 == 'Y')
            search();
            else
               {  cin.clear();  main();}
}


long int employee:: auto_reg()  //generates the registration number automatically but on the basis of last number generated
{
    long int id2;  //local variable
	ifstream file("Employee Leave Management.txt");
	while(!file.eof())
	{
		file >> name >> id2 >> salary >> leave;
	}  //reads through the whole file but we take only id so that to generate the next number and increment the number by one

	id2 = id2 + 1;
	return id2;
}


void employee :: visitweb()
{
    system("cls");
    char cha;
    char text[]  = "\n\n\tProceeding with yes will take you to that website which\n\t contains the source code of this project";
    char text2[] = "\n\n\tDo you want to proceed (y/n) ? ";
    char *ptr ;

    ptr  = &text[0];
        for (int i = 0; i < sizeof(text); i++)
            {   cout << *(ptr+i);    Sleep(20);  }     delete[] ptr;

    ptr  = &text2[0];
        for (int i = 0; i < sizeof(text2); i++)
            {   cout << *(ptr+i);    Sleep(20);  }     delete[] ptr;
     cin >> cha;
    if(cha  ==  'y' || cha  ==  'Y')
    {
         system("start chrome.exe http://tinyurl.com/dullstudent");
         main();
    }
    else main();
}
